@using Portfolio.Models
<p>
    I made this portfolio website to learn the basics of fullstack .NET development. 
    It utilises GitHub actions to perform secret scanning, deploy to Azure, and deploy to my own server.
</p>
<h3>Development</h3>
<p>
    As the project is built with Blazor, it uses its component system for a modular structure.
</p>
<Accordion>
    <AccordionItem Title="Component Tree">
        <Content>
            <p>
                The project is built with a tree structure that is designed for maximum possible reusability.
            </p>
            <ContentImage Src="portfolio/ProjectStructure.png" Description="A simplified hierarchy of components in the project."/>
            <p>
                A page has a ProjectView, to which it passes an ordered list of ProjectInfos.
                Each ProjectInfo describes a particular project, such as the one you are reading now.
                The ProjectView then displays the projects as ProjectCards in a grid structure.
                Each ProjectCard can be clicked to open a Modal, which at the top has ProjectTop.
                The ProjectTop displays the image and an infobox, which is filled with ActionButtons to take the user to additional information.
                After the ProjectTop comes additional content specific to the project.
            </p>
        </Content>
    </AccordionItem>
    <AccordionItem Title="Technology Tags">
        <Content>
            <p>
                The technology tags on the project cards are defined by an enum. 
                Each tag has an associated text and colour. 
                Each ProjectInfo contains a bitmask to represent its tags, which is then turned into the visual tags. 
                While this limits the amount of tags possible, it is also an easy and lightweight way to define tags and ensure that they appear in a consistent order.
            </p>
            <ContentImage Src="portfolio/TagsExample.png" Description="An example of defining three tags for a project."/>
        </Content>
    </AccordionItem>
    <AccordionItem Title="Bootstrap">
        <Content>
            <p>
                The project makes extensive use of Bootstrap classes. 
                It additionally features a project called Blazor Bootstrap, 
                which contains Blazor Components that already integrate Bootstrap. 
                That is for example used to make the Accordion that this is written in.
            </p>
            <ContentImage Src="portfolio/AccordionExample.png" Description="The code for this text."/>
        </Content>
    </AccordionItem>
</Accordion>

<p>
    The technology tags displayed on the cards are  
</p>
<h3>Deployment</h3>
<p>
    The git repository has a simple setup of two primary branches, main and release. 
    I work on the website locally, where I of course can build and see the results as I go. 
    When I push to GitHub, various workflows are activated.
</p>
<ContentImage Src="portfolio/PortfolioWorkflow.png" Description="The pipeline of the code and the actions triggered."/>
<p>
    Pushing to main triggers two actions.
    First, the website is deployed to <a href="https://otterknightmagnusportfolio-a3axcyhvdyegfkeq.northeurope-01.azurewebsites.net/">an Azure site</a>, which I can share with others to get feedback on the website. 
    Second, SonarCloud - an industry standard tool for code analysis - initiates a scan of the repository for secrets and security issues.
    It is meant as a failsafe to ensure I do not expose any vulnerabilities.
</p>
<p>
    If everything is good, I can merge main into release. 
    This triggers a GitHub workflow that builds the project and deploys it to my server, which hosts it at <a href="https://otterknight.net">otterknight.net</a>. 
    This workflow of course keeps sensitive information such as an SSH key secret using GitHub secrets.
</p>
<ContentImage Src="portfolio/GitHubActions.png" Description="Four jobs completed for a push to main and release."/>

@code {
    public static ProjectInfo ProjectInfo = new() {
        ModalView = @<PortfolioSite/>,
        Title = "This Website",
        Id = "PortfolioSite",
        ShortDescription = "Website made with the .NET stack and deployed with GitHub Actions.",
        ImageSource = "/images/Blazor.png",
        TeamSize = "Solo",
        TechnologiesDescription = "C#, ASP.NET, Azure, Blazor, HTML, CSS, Bootstrap",
        Role = "Programming, design",
        Duration = "October 2024",
        Buttons = [
            new ActionButton.ButtonLink() {
                Destination = ActionButton.Destination.GitHub,
                Url = "https://github.com/MagnusMouritzen/portfolio"
            }
        ],
        Technologies = ProjectInfo.TechnologyMask(new [] {
            ProjectInfo.Technology.Cs, 
            ProjectInfo.Technology.NET, 
            ProjectInfo.Technology.CICD
        })
    };

}